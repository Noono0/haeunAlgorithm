---------- 실전 자바 디자인 패턴 ----------

1) 객체 지향
  1. 클래스
    객체와 인스턴스 : 클래스에서 객체를 만드는 프로스세스를 클래스 인스턴스화(instantiate) 라고 하며, 클래스에서 생성된 객체를 해당 클래스의 인스턴스(instance)라고 한다.
    
    클래스 정의 : 클래스에는 생성자와 멤버변수, 메서드가 있다.

    접근 제어자 : 클래스 멤버의 접근 권한을 지정하는 키워드로 public, protected, private 를 제공한다.
                  접근 제어자를 생략하면 기본적으로 default이다
                  public으로 지정된 멤버는 클래스 밖에서 자유롭게 접근할 수 있다.
                  클래스 멤버가 protected 로 지정되면 해당 클래스나 자식 클래스에서 접근할 수 있다.
                  클래스 멤버가 private 으로 지정되면 해당 클래스에서만 접근할 수 있다.

    클래스 멤버변수와 메서드
      클래스 멤버 변수와 메서드에 static 키워드를 사용하여 만든다
      이 클래스로 만들어진 모든 인스턴스에 공유되기 때문에 인스턴스를 만들지 않아도 클래스 멤버에 접근할 수 있다.

  2. 클래스 상속

  3. 오버라이딩과 오버로딩  //어느정도 아니깐 대충 검색으로 알아보자 여기설명은 빈약
    
  4. 추상 클래스 
    추상클래슨느 구현 메서드와 추상 메서드가 동시에 존재할 수 있다.
    구현메서드는 실제 구현 내용을 포함한 메서드이다.
    추상메서드는 선언만 된 메서드이다.
    추상 클래스는 구현 내용이 없는 추상 메서드를 포함하기 때문에 불완전한 클래스이다.
    추상클래스는 단독으로 객체를 생성할 수 없고 추상 클래스를 상속하고 구현 내용을 추가하는 자식 클래스를 통해 객체를 생성한다.

    정의 : abstract 키워드를 클래스 선언 앞에 붙여서 선언한다.
            추상 메서드를 선언할 때도 abstract 키워드를 사용한다.


  5. 인터페이스
    자신 인터페이스는 여러 부모 인터페이스를 다중 상속할 수 있다.

    인터페이스에서 선언한 메서드를 모두 재정의해야 한다.





위에꺼는 다필요없는거같고 나중에 삭제하자
객체지향 설계 원칙   S.O.L.I.D 공부하자
  1. 단일 책임 원칙
  2. 개방 폐쇄 원칙
  3. 리스코프 치환 원칙
  4. 인터페이스 분리 원칙
  5. 의존 역전 원칙

생성패턴
  1. 싱글톤
  2. 빌더
  3. 팩토리메서드
  4. 프로토타입
  5. 추상팩토리

구조패턴
  1. 어댑터
  2. 브리지
  3. 컴포지트
  4. 데커레이터
  5. 퍼사드
  6. 플라이웨이트
  7. 프록시

행위패턴
  1. 책임연쇄
  2. 커맨드
  3. 인터프리터
  4.이터레이터
  5. 미디에이터
  6. 메멘토
  7. 옵저버
  8. 스테이트
  9. 스트래티지
  10. 템플릿 메서드
  11. 비지터

모던 자바 패턴
1. 제네릭스
2. Enums
3. Annotation































