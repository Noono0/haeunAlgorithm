----- 21.07.28 -----

git 토큰 ghp__HfovRT6NvwCduVKThx0mYaeyK7lxsZ2nI2qL

OOP란
현실세계를 프로그래밍으로 옮겨와 현실세계의 사물들을 객체로 보고 그 객체로부터 특징, 기능을 프로그래밍하는 기법

SOLID
  ㄴ> 단일 책임 원칙 : 클래스는 하나의 책임,목적 을가져야하며 클래스를 변경하는 이유는 하나여야 한다.
  ㄴ> 개방 폐쇄 원칙 : 클래스는 확장에는 열려있고 변경에는 닫혀있어야 한다.
  ㄴ> 리스코프 치환 원칙 : 상위타입객체을 하위타입객체으로 변경하여도 프로그램은 일관되게 동작하여야 한다
  ㄴ> 인터페이스 분리법칙 : 클라이언트는 이용하지 않는 메소드의 의존하지 않도록 인터페이스를 분리해야 한다
  ㄴ> 의존 역전 원칙 : 고수준 모듈은 저수준 모듈에 종속되어서는 안된다. (자신보다 변하기 쉬운것에 의존하지 마라)



RESTful 이란
REST 제약조건들을 제대로 지키면서 REST 아키텍쳐를 만드는 것을 RESTful이라 한다.

HTTP URI 를 통해 자원을 명시하고 Http method 를 통해 해당자원에 대한 CRUD Operation을 적용하는 것을 의미한다.
REST API의 구성

RESTful 제약조건
CCCSLU 라고 외워야지
  Client -Server   -  일관적인 인터페이스로 분리되어야 한다.
  Cacheable - 클라이언트의 응답을 캐시할수 있어야 한다. 캐싱은 클라이언트 - 서버간 상호작용을 부분적으로 또는 완전하게 제거하여 확장성과 성능을 향상시킨다.
  Code on Demand    -   서버가 자바애플릿이나 자바스크립트 실행코드의 제공을 통해 클라이언트가 실행시킬수 있는 로직을 전송하여 기능을 확장시킬수 있다.

  Stateless    -    서버에 클라이언트의 상태정보를 저장하지 않는다.
  Layered System    -   중간 서버는 로드밸런싱 기능이나 공유 캐시 기능을 제공함으로써 확장성 있는 시스템을 구성하는데 유용하다.

  Uniform Interface     -    아키텍처를 단순화시키고 작은 단위로 분리함으로써 클라이언트 - 서버의 각 파트가 독립적으로 개선될 수 있도록 해준다.





(1)네트워크, (2)운영체제,(3)자료구조와 알고리즘,(4)DB 그리고 (5)언어/프레임워크


2. 각 분야별 개발 면접 기출 질문
(1) 네트워크
"브라우저에 XXX사이트의 주소를 입력하고
웹 사이트가 로딩될 때까지의 과정을 설명해주세요"
이 질문을 통해 면접관은 면접자가 소켓,OSI7계층,TCP/IP 4계층,HTTP,DNS 등에 대
해 얼마나 아는지 파악할 수 있습니다. 해당 지식들을 사용해 답을 설명할 수 있도록
준비해보세요.


"TCP 연결 및 연결 종료 과정에 대해 설명해주세요"
TCP의 연결의 경우 3way Handshaking이 발생합니다. 각 소켓들이 어떤 방식으로
Handshake를 하는지 반드시 알아야합니다. 또한 종료 과정은 4way Handshake가
발생하는데, 종종 연결 과정과 이어서 종료 과정까지 설명하기를 요구하는 면접관들도
있으니 미리 준비하는 것이 좋습니다.



"HTTP 응답 코드와 HTTP 메서드에 대해 아는대로 설명해주세요"
개발 실무를 하면서 가장 많이 맞닥뜨리는 에러 중 하나가 다른 서비스를 호출했는데
200응답이 오지 않고 에러가 발생하는 상황입니다. 다른 서비스들을 Rest API로 호출하고 응답을 받아 필요한 프로세스를 처리하는 경우가 많기 때문입니다. 따라서 거의
대부분의 신입 개발 면접에서 이 질문이 주어집니다. 응답 코드들과 메서드들을 거의
암기하고, 차이들을 반드시 숙지해야합니다. 특히나 GET/POST의 차이,
PUT/POST/PATCH의 차이 등은 위의 질문에 이어서 정말 자주 등장하는 질문이기 때
문에 자세한 차이점들을 모두 알고 면접장에 가시기를 추천합니다.


"HTTP와 HTTPS의 차이를 설명해주세요, SSL의 동작 방법에 대해 설명해주세요"
HTTPS의 S가 SSL이란 것은 아실텐데요. SSL의 동작 방법에 대해서 물어보시는 면접
관들도 꽤 많습니다. SSL이란 무엇인지는 물론이고, SSL 연결 과정에서 공개키 암호화
와  대칭키 암호화 방식을 어떻게 사용하는지를 자세히 알고 있어야 합니다.



[기타]
"쿠키와 세션은 무엇이고 어떻게 다른가요", "TCP/UDP의 차이를 설명해주세요",
"HTTP1와 HTTP1.1의 차이를 설명해주세요", "HTTP1.1와 HTTP2의 차이를 설명해주세요"
"REST란 무엇인가, SOAP란 무엇인가, gRPC와 프로토버프란 무엇인가"
"블로킹과 논블로킹의 차이는 무엇인가요", "소켓의 연결 과정을 설명해주세요"
등등..
이 외에도 다양한 네트워크 관련 질문들이 있습니다. 학교에서, 학원에서 배운 네트워
크 지식들을 본인이 분명히 알고 있는지 확인하고, 면접관의 입장에서 추가로 어떤 질
문을 '꼬리물기'로 물어보고 싶을 지 생각하며 관련 지식들을 미리 숙지하고 가는 것
이 좋습니다.


(2) 운영체제
"프로세스와 쓰레드의 차이를 설명해주세요"
프로세스와 쓰레드에 대한 질문은 운영체제 영역에서 가장 자주 등장하는 질문입니다.
프로세스는 코드, 데이터, 스택, 힙 영역으로 구성된 메모리 영역에서 독립적으로 실행되는 프로그램 인스턴스를 뜻합니다. 각각 독립적인 메모리 영역을 사용하는 프로세스
에 비해 쓰레드는 프로세스 내에서 스택 영역만 따로 할당 받고 나머지 메모리 영역
은 서로 공유하게 되죠. 이런 차이점들 때문에, 자원의 사용이나 통신 방법에서도 프
로세스와 쓰레드는 상이할 수밖에 없습니다. 왜 다른지, 어떻게 다른지, 그래서 장단점
은 무엇인지를 미리 공부하시는게 좋습니다. 또한, 여기서 파생하여 멀티쓰레드와 멀
티프로세스가 무엇이고 차이는 무엇인지, Context Switching이란 무엇인지 물어보는
질문까지도 자주 주어지므로 주의하세요.



"세마포어, 뮤텍스를 설명해주세요"
여러 프로세스, 여러 쓰레드가 동시에 작동하고 있을 때 공유된 자원에 대한 동시 접
근을 막기 위해 운영체제에는 여러 동기화 장치들이 있습니다. 그러한 관점에서 세마
포어와 뮤텍스의 차이가 무엇인지, 어떻게 동작하는 지 알고 있어야 합니다.



"운영체제의 메모리 관리 기법인 페이징 기법에 대해 설명해주세요"
물리 메모리, 논리 메모리, 페이징, 주소 변환, 페이지 테이블, TLB, 단편, 페이지 폴트,
스레싱을 키워드로 페이징에 대해서 설명할 수 있으면 좋습니다. 전체적으로 그림을
그리며 설명할 수 있으면 좋은 질문이기도 합니다. 이 질문에 이어서 세그멘테이션 기
법에 대해서도 질문이 들어올 수 있으니 미리 대비하는 것도 좋습니다. 또한 페이지
교체 기법(Optimal,LRU,FIFO등) 에 따른 페이지 교체 횟수의 비교에 대한 질문도 던
져질 수 있습니다.


[기타]
"PCB(프로세스 제어블록)에 대해 설명해주세요", "크리티컬 섹션에 대해 설명해주세요",
"CPU 스케쥴링 알고리즘들에 대해 아는 대로 설명해주세요"
"데드락과 데드락을 피할 수 있는 방법을 설명해주세요"
등등..




운영체제의 동작 방식을 '이해'하고 면접장에 들어가시길 바랍니다.



(3) 자료구조와 알고리즘
"스택 2개로 큐를 구성해보세요 or 큐2개로 스택을 구성해보세요"
자료구조를 제؀로 이해함과 동시에 자유롭게 활용하고 응용할 수 있는지를 알아보는
질문입니다. 스택으로 큐만들기의 경우, 입력 스택과 출력 스택을 분리하는 것이 키입
니다. 입력 시에 입력 스택에 쭉 push하고 출력 필요 시에 입력 스택에 있던 데이터
들을 모두 pop하여 하나씩 출력 스택에 push 하면, 출력 스택에서 pop할 때 처음
입력한 순서؀로 출력이 가능합니다.


두 개의 큐로 스택 구성할 때는, 임시 저장 큐와 입출력 큐를 구분해서 사용하면 됩니
다. 매 입력 전마다 입출력 큐에 있는 데이터들을 모두 dequeue해서 임시저장 큐에
넣어두고, 입출력 큐에 최신 데이터가 enqueue되면, 다시 임시저장 큐에 있는 데이터
들을 하나하나 dequeue하여 입출력 큐에 다시 enqueue하면 됩니다.


"스택, 큐, 트리, 그래프, 힙, 링크드 리스트를 설명하고 구현해보세요"
؀표적인 자료구조들에 ؀해서는 당연히 잘 이해하고 설명할 수 있어야 함은 물론이
고, 종종 손코딩의 주제로 자료구조가 택해지기도 합니다. 트리를 주고 깊이우선탐색
과 넓이우선탐색을 구현해보라든지, 링크드 리스트 자체를 손코딩해보라든지하는 면접
질문은 꽤 많이 등장합니다. 각 자료 구조별로 입력, 삭제, 조회를 어떻게 해야하는 지
에 ؀해 구두/손코딩으로 설명해야 하는 경우도 많구요. 특히 트리구조의 경우는 DB
인덱스 자료구조로도 사용되고 있기 때문에,DB 인덱싱과 연관해서 질문이 주어지기도 합니다.


"소팅의 종류에 대해 나열하고 구현 혹은 설명해보세요"
역시나 자료구조, 손코딩의 단골 손님은 아무래도 소팅입니다. 각 소팅의 종류별로 구
현 방법을 완벽히 숙지함은 물론이고, 종종 복잡도에 ؀해서도 물어보는 경우가 있으
니 반드시 이해 및 암기하는게 좋습니다. 그 중에서도, 선택정렬, 버블정렬, 삽입정렬,
퀵정렬은 필수입니다. 어떤 소팅이 왜 빠르고 왜 느린지, 왜 메모리를 적게 쓰는지 등
등을 반드시 이해해야 하며, 손으로 작성할 수 있어야 합니다.


(4) DB
"DB 트랜잭션이란 무엇인가요"
트랜잭션은 실무를 하면서 정말 많이쓰이고 중요한 요소 중에 하나입니다. 커밋, 롤백,
무결성이란 키워드를 통해 답변하면 좋습니다. 따라서 트랜잭션에 ؀해 제؀로 이해하
고 있음은 물론이고, 트랜잭션의 격리 수준(Isloation Level)과 전파(Propgation)에 ؀
한 질문에도 답변할 수 있으면 좋습니다. 특히 격리 수준의 경우 실무에서 다양한 이
슈를 발생시키는 원인이 될때가 많기 때문에 경력직 면접에서도 자주 물어보는 질문
중에 하나고, 잘 알고 있다면 가산점이 될 수 있겠습니다.



"인덱스란 무엇인지 설명해주세요"
인덱스 역시 트랜잭션과 함께 실무에서 가장 많이 맞닥뜨리는 요소입니다. 인덱스는
테이블에 저장되어 있는 데이터들을 더 빠르게 조회할 수 있게 해주는 좋은 도우미이
지만, 인덱스가 너무 많거나 무거울 경우 원본 데이터보다도 더 많은 용량을 차지하는
것은 물론이고, 데이터 입력, 수정, 삭제 시에 인덱스를 추가/수정하느라 성능 이슈가
발생할 수도 있습니다. 또한 ؀부분의 MySql DB에서는 b-tree 자료구조로 인덱스를
저장하고 있다는 점도 잊지 마세요.


"LEFT Join, RIGHT Join, INNER Join 에 대해 설명해주세요"
테이블을 정규화하다보면, 여러 테이블을 이런 저런 Join 방식으로 조합해야 하는 경
우를 자주 맞닥뜨립니다. 각 Join 방식이 두 테이블을 어떤 기준으로 조합하고 조회하
는 지 잘 알고 있어야 합니다. 손코딩의 주제로 쿼리를 작성해야 하는 경우도 많기 때
문에, 설명은 물론이고 실제 쿼리를 작성하고 결과를 예측할 수도 있는 것을 권장합니
다.



[기타]
"ACID란 무엇인가요",  "마스터슬레이브란 무엇인가요",
"샤딩과 파티셔닝에 대해서 아시나요", "NoSQL과 RDBMS의 차이에 대해서 설명해주세요"
"스토리지 엔진(InnoDB, MyISAM등) 들에 대해 나열하고 차이를 설명해주세요"
"Shared Lock과 Exclusive Lock에 대해 설명해주세요"
등등..
DB는 4가지 컴퓨터 공학 기초 지식 중에서 가장 실무에 맞׿아 있다고 해도 무방합
니다. 그만큼 잘 답변할 수록 가산점을 얻기에도 좋습니다. 특히나 인덱스, 트랜잭션,
락과 같은 키워드들은 거의 ؀부분의 면접에서 무조건 등장하기 때문에, 익숙해질 때
까지 여러번 공부해두는 것을 추천합니다.



(5) 프로그래밍 언어 및 프레임워크 (Java와 Spring위주로 작성했습니다)
"JVM의 메모리 구조에 대해서 설명해주세요"
Java의 가장 큰 특징 중 하나로 JVM을 꼽을 수 있을 것 같습니다. Java라는 언어가
OS와 무관하게 동작할 수 있도록 가상 머신을 작동시키는 것인데, 이 JVM은 Java 개
발자들에게 양날의 검이기도 하죠. 메모리 관리를 직접 할 필요가 없기 때문에 개발에
집중할 수 있지만, 종종 의도한؀로 메모리 관리가 되지 않아 장애 상황까지 이어지는
경험도 자주 합니다. 따라서 JVM의 구조를 아는 것은 Java 개발자에게 있어서 필수
입니다. 특히나 Heap 영역과 Stack 영역의 차이가 무엇인지, Young 영역과 Old 영
역이 무엇인지, 각 영역에 어떤 값들이 저장되는지에 ؀해서는 반드시 숙지해야 합니다.

또한 JVM옵션들에 ؀해 질문하는 면접관들도 종종 계시니, 주로 사용하는 JVM 옵션
들(-Xms,-Xmx,-XX:newSize,-XX:maxNewSize 등)과 사용처를 알고 있다면 면접관
들에게 좋은 인상을 남길 수 있습니다.



"GC 알고리즘의 종류를 설명해주세요 "
GC란 아시다시피 GarbageCollection의 줄임말입니다.GC를 통해 JVM은 스스로 메
모리를 적절한 수준으로 관리하도록 되어있습니다. GC를 하는 알고리즘으로는 Serial
GC, ParallelGC,ParallelOldGC,CMS,G1GC, 그리고 비교적 최근에 등장한 ZGC
까지 아주 다양합니다. 이 중에서도,CMS와 G1GC는 기본적으로 알아두는 것이 좋습
니다. 현업에서 가장 많이 쓰이고 있는 GC 알고리즘이기 때문이죠. 각 GC들이 어떤
식으로 Young 영역과 Old 영역을 지정하고 사용하고 정리하는지 방식과 순서에 ؀해
서도 꼭 알아두는 것을 추천합니다.


"GC는 어떻게 동작하나요"
다양한 GC 알고리즘이 있지만, 기본적으로 GC가 전제하는 사항과 Young/Old 영역
을 개념적으로 나누어 사용한다는 점은 비슷합니다.Young 영역 내의 eden, survivor
영역이 어떻게 활용되고 MinorGC는 어떻게 발생하는지, survivor영역을 거쳐 오래된
데이터들이 어떻게 Old 영역으로 이동되도록 마크되는지, Old 영역이 꽉 차서 Full
GC가 발생할 경우 어떤 일이 벌어지는지(Stop the world!)에 ؀해서 순차적으로, 논
리적으로 설명할 수 있어야 합니다.


"다형성에 대해서 설명해주세요"
Java의 큰 특징 중 하나는 다형성입니다. 인터페이스와 추상화를 통해 한 타입의 변수
가 여러 타입의 객체를 참조할 수 있습니다. 이를 통해서 유연한 구조 설계가 가능하
고, 확장성을 미리 고려한다면 기능이 추가되도 큰 개발 공수가 들어가지 않습니다.
다형성을 설명하기 위해 인터페이스와 추상화, 구현과 상속에 ؀해 이야기할 수 있다
면 베스트입니다.



"Spring에서 IOC와 DI는 무엇인가요"
이제는 SpringFramework 없이 자바 어플리케이션을 개발하는 것은 상상하기 어려울
정도입니다. 그만큼 Spring의 기본 지향점에 ؀한 질문도 꽤 자주 등장합니다.
IOC(InversionofControl)은 말그؀로 제어의 역전으로, 메서드 호출이나 객체의 생성
등을 개발자 개인이 아닌 스프링 컨테이너가 제어하는 것을 말합니다. 이와 언제나 함
께 등장하는 DI역시 스프링 컨테이너에 의해 필요한 빈을 주입받는 것이죠. 둘 모두
스프링 컨테이너의 역할이 중요하며, 모듈간의 결합도를 낮춰 유지보수하기 좋은 코드
를 작성할 수 있도록 도와줍니다.




[기타]
"서블릿이란 무엇인가요", "Spring MVC 구조와 처리 순서에 대해서 말해주세요",
"알고 있는 디자인 패턴들에 대해 설명해주세요", "객체지향에 대해 설명해주세요",
"Thread safe한 싱글톤 패턴을 구현해보세요 ", "스프링 Bean Scope에 대해 설명해주세요"
"Java8의 핵심 키워드와 특징들에 대해 설명해주시고, 사용 경험을 공유해주세요",
"String과 StringBuffer, StringBuilder의 차이에 대해 설명해주세요"
등등..
Java와 Spring에 ؀해서는 사실 질문이 끝도 없습니다. 면접관들이 어제도 오늘도 내
일도 사용하고 있는 언어이자 프레임워크이기때문에, 면접자 역시 많이 알고 많이 사
용해봤을 수록 좋습니다. 물론 스프링의 사용'법'만 아는 것으로는 부족합니다. Spring
이전에 Servlet의 특징들과 동작 방법에 ؀해서 알고, 웹 요청이 어떻게 들어오고 응
답되는 지에 ؀해 먼저 이해한 뒤에 Spring을 공부한다면 좀 더 와׿는 부분들이 많
을 것으로 기؀합니다. 또한 Spring에서 사용되는, 혹은 유명한 디자인 패턴들에 ؀해
서도 자주 질문이 주어지니 한 번 살펴보고 가시기를 추천합니다.
