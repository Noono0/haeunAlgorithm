----- 21.07.28 -----

git 토큰 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

OOP란
현실세계를 프로그래밍으로 옮겨와 현실세계의 사물들을 객체로 보고 그 객체로부터 특징, 기능을 프로그래밍하는 기법

SOLID
  ㄴ> 단일 책임 원칙 : 클래스는 하나의 책임,목적 을가져야하며 클래스를 변경하는 이유는 하나여야 한다.
  ㄴ> 개방 폐쇄 원칙 : 클래스는 확장에는 열려있고 변경에는 닫혀있어야 한다.
  ㄴ> 리스코프 치환 원칙 : 상위타입객체을 하위타입객체으로 변경하여도 프로그램은 일관되게 동작하여야 한다
  ㄴ> 인터페이스 분리법칙 : 클라이언트는 이용하지 않는 메소드의 의존하지 않도록 인터페이스를 분리해야 한다
  ㄴ> 의존 역전 원칙 : 고수준 모듈은 저수준 모듈에 종속되어서는 안된다. (자신보다 변하기 쉬운것에 의존하지 마라)



RESTful 이란
REST 제약조건들을 제대로 지키면서 REST 아키텍쳐를 만드는 것을 RESTful이라 한다.

HTTP URI 를 통해 자원을 명시하고 Http method 를 통해 해당자원에 대한 CRUD Operation을 적용하는 것을 의미한다.
REST API의 구성

RESTful 제약조건
CCCSLU 라고 외워야지
  Client -Server   -  일관적인 인터페이스로 분리되어야 한다.
  Cacheable - 클라이언트의 응답을 캐시할수 있어야 한다. 캐싱은 클라이언트 - 서버간 상호작용을 부분적으로 또는 완전하게 제거하여 확장성과 성능을 향상시킨다.
  Code on Demand    -   서버가 자바애플릿이나 자바스크립트 실행코드의 제공을 통해 클라이언트가 실행시킬수 있는 로직을 전송하여 기능을 확장시킬수 있다.

  Stateless    -    서버에 클라이언트의 상태정보를 저장하지 않는다.
  Layered System    -   중간 서버는 로드밸런싱 기능이나 공유 캐시 기능을 제공함으로써 확장성 있는 시스템을 구성하는데 유용하다.

  Uniform Interface     -    아키텍처를 단순화시키고 작은 단위로 분리함으로써 클라이언트 - 서버의 각 파트가 독립적으로 개선될 수 있도록 해준다.





